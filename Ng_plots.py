# -*- coding: utf-8 -*-
"""
Created on Tue Jun  3 15:03:00 2025

@author: vosku
"""
import matplotlib.pyplot as plt
import numpy as np

# Set global style
plt.close('all')

# Configure figure aesthetics
plt.rcParams.update({
    'figure.figsize': (8,5),
    'axes.titlesize': 18,
    'axes.labelsize': 18,
    'xtick.labelsize': 18,
    'ytick.labelsize': 18,
    'legend.fontsize': 18,
    'axes.spines.top': False,
    'axes.spines.right': False,
    'axes.spines.left': False,
    'lines.linewidth': 1.5,
    'grid.alpha': 0.5,
    'scatter.marker': '^',
    'lines.markersize': 5,
    'font.family': 'DejaVu Sans',
})


temp_Ar = np.array([16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0, 109.0, 110.0, 111.0, 112.0, 113.0, 114.0, 115.0, 116.0, 117.0, 118.0, 119.0, 120.0, 121.0, 122.0, 123.0, 124.0, 125.0, 126.0, 127.0, 128.0, 129.0, 130.0, 131.0, 132.0, 133.0, 134.0, 135.0, 136.0, 137.0, 138.0, 139.0, 140.0, 141.0, 142.0, 143.0, 144.0, 145.0, 146.0, 147.0, 148.0, 149.0, 150.0, 151.0, 152.0, 153.0, 154.0, 155.0, 156.0, 157.0, 158.0, 159.0, 160.0, 161.0, 162.0, 163.0, 163.0, 164.0, 165.0, 166.0, 167.0, 168.0, 169.0, 170.0, 171.0, 172.0])
temp_Kr = np.array([16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0, 109.0, 110.0, 111.0, 112.0, 113.0, 114.0, 115.0, 116.0, 117.0, 118.0, 119.0, 120.0, 121.0, 122.0, 123.0, 124.0, 125.0, 126.0, 127.0, 128.0, 129.0, 130.0, 131.0, 132.0, 133.0, 134.0, 135.0, 136.0, 137.0, 138.0, 139.0, 140.0, 141.0, 142.0, 143.0, 144.0, 145.0, 146.0, 147.0, 148.0, 149.0, 150.0, 151.0, 152.0, 153.0, 154.0, 155.0, 156.0, 157.0, 158.0, 159.0, 160.0, 161.0, 162.0, 163.0, 164.0, 165.0, 166.0, 167.0, 168.0, 169.0, 170.0, 171.0, 172.0, 173.0, 174.0, 175.0, 176.0, 177.0, 178.0, 178.0, 179.0, 180.0, 181.0, 182.0, 183.0, 184.0, 185.0, 186.0, 187.0])

Ar_smoothed = np.array([
    0., 0., 0., 0., 0., 0.,
    0., 0., 0., 0., 0., 0.,
    0., 0., 0., 0., 0., 0.,
    0., 0., 0., 0., 0., 0.,
    0., 0., 0., 0., 0., 0.,
    0., 0., 0., 0., 0., 0.,
    0.51282051, 0.51282051, 1.02564103, 1.53846154, 3.07692308, 3.07692308,
    3.58974359, 4.1025641, 6.66666667, 8.71794872, 13.33333333, 16.41025641,
    22.05128205, 29.23076923, 38.97435897, 45.12820513, 53.84615385, 65.64102564,
    75.38461538, 81.02564103, 83.07692308, 84.1025641, 74.35897436, 55.8974359,
    40., 27.69230769, 16.41025641, 7.69230769, 7.17948718, 4.61538462,
    3.58974359, 1.53846154, 2.56410256, 1.53846154, 1.02564103, 1.02564103,
    1.02564103, 0., 1.02564103, 2.05128205, 2.56410256, 3.07692308,
    3.58974359, 3.58974359, 3.58974359, 5.64102564, 6.66666667, 7.17948718,
    7.17948718, 6.66666667, 5.12820513, 3.58974359, 3.58974359, 3.58974359,
    4.61538462, 4.61538462, 5.64102564, 4.61538462, 4.61538462, 3.58974359,
    3.07692308, 2.56410256, 3.58974359, 2.56410256, 2.56410256, 2.56410256,
    2.56410256, 1.53846154, 1.53846154, 1.53846154, 1.53846154, 2.05128205,
    2.56410256, 3.07692308, 2.56410256, 3.07692308, 3.07692308, 3.58974359,
    5.64102564, 5.64102564, 4.61538462, 4.61538462, 4.61538462, 2.56410256,
    3.07692308, 3.07692308, 2.05128205, 2.56410256, 3.07692308, 3.07692308,
    4.1025641, 5.12820513, 3.58974359, 3.58974359, 4.1025641, 3.58974359,
    3.58974359, 4.1025641, 5.64102564, 5.12820513, 5.64102564, 6.15384615,
    6.66666667, 4.61538462, 5.64102564, 5.12820513, 4.1025641, 4.61538462,
    6.15384615, 14.35897436, 13.84615385, 13.33333333, 11.79487179, 9.74358974,
    0., 0., 0., 0., 0., 0.,
    0., 0.
])

Kr_smoothed = np.array([
    0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
    0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
    0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
    0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
    0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
    0., 0., 0., 0., 0., 0.625, 0.625, 1.875, 2.5, 4.375,
    5., 6.25, 8.75, 13.75, 16.875, 19.375, 24.375, 29.375, 29.375, 33.125,
    36.25, 44.375, 55.625, 60.625, 66.875, 71.25, 66.25, 56.875, 51.25, 37.5,
    29.375, 20., 10., 5.625, 5.625, 5., 5., 4.375, 4.375, 4.375,
    3.125, 3.75, 3.75, 3.75, 3.125, 2.5, 1.875, 3.125, 3.125, 3.125,
    3.75, 3.75, 2.5, 3.75, 3.125, 2.5, 3.125, 3.125, 1.25, 1.875,
    1.875, 1.25, 1.25, 1.25, 0.625, 0., 0., 0.625, 0.625, 0.625,
    1.875, 1.875, 1.25, 1.875, 3.125, 1.875, 2.5, 3.75, 4.375, 3.75,
    4.375, 4.375, 3.75, 3.125, 3.125, 3.75, 3.75, 3.125, 3.125, 4.375,
    3.75, 4.375, 5.625, 6.25, 5., 5., 6.25, 6.875, 6.875, 9.375,
    9.375, 9.375, 7.5, 6.25, 3.75, 3.125, 0.625, 0.625, 1.25, 0.625,
    0.625, 0.625, 0.625, 0., 0., 0., 0., 0., 0., 0.,
    0., 0., 0.
])
temp_Xe = np.array([16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0, 109.0, 110.0, 111.0, 112.0, 113.0, 114.0, 115.0, 116.0, 117.0, 118.0, 119.0, 120.0, 121.0, 122.0, 123.0, 124.0, 125.0, 126.0, 127.0, 128.0, 129.0, 130.0, 131.0, 132.0, 133.0, 134.0, 135.0, 136.0, 137.0, 138.0, 139.0, 140.0, 141.0, 142.0, 143.0, 144.0, 145.0, 146.0, 147.0, 148.0, 149.0, 150.0, 151.0, 152.0, 153.0, 154.0, 155.0, 156.0, 157.0, 158.0, 159.0, 160.0, 161.0, 162.0, 163.0, 164.0, 165.0, 166.0, 167.0, 168.0, 169.0, 170.0, 171.0, 172.0, 173.0, 174.0, 175.0, 175.0, 176.0, 177.0, 178.0, 179.0, 180.0, 181.0, 182.0, 183.0, 184.0])
Xe_smoothed = np.array([
    0., 0., 0., 0., 0., 0.,
    0., 0., 0., 0., 0., 0.,
    0., 0., 0., 0., 0., 0.,
    0., 0., 0., 0., 0., 0.,
    0., 0., 0., 0., 0., 0.,
    0., 0., 0., 0., 0., 0.,
    0., 0., 0., 0., 0., 0.,
    0., 0., 0., 0., 0., 0.,
    0., 0., 0., 0., 0., 0.,
    0., 0., 0., 0., 0., 0.,
    0., 0.71428571, 1.42857143, 1.42857143, 2.14285714, 2.14285714,
    2.14285714, 2.14285714, 3.57142857, 3.57142857, 4.28571429, 4.28571429,
    5.71428571, 6.42857143, 7.14285714, 7.85714286, 7.85714286, 12.85714286,
    14.28571429, 17.14285714, 20., 25.71428571, 31.42857143, 39.28571429,
    45.71428571, 50.71428571, 60.71428571, 64.28571429, 71.42857143, 75.,
    81.42857143, 80.71428571, 80., 75.71428571, 69.28571429, 66.42857143,
    57.14285714, 50., 41.42857143, 36.42857143, 28.57142857, 22.85714286,
    15.71428571, 12.14285714, 10.71428571, 7.85714286, 7.85714286, 7.14285714,
    7.14285714, 6.42857143, 5., 6.42857143, 10., 11.42857143,
    12.14285714, 12.14285714, 12.14285714, 12.14285714, 10.71428571, 13.57142857,
    12.85714286, 11.42857143, 7.85714286, 7.14285714, 6.42857143, 8.57142857,
    7.85714286, 8.57142857, 8.57142857, 5.71428571, 6.42857143, 7.14285714,
    7.85714286, 8.57142857, 12.85714286, 12.14285714, 15.71428571, 15.71428571,
    16.42857143, 17.85714286, 20.71428571, 21.42857143, 21.42857143, 20.71428571,
    20.71428571, 22.14285714, 21.42857143, 22.85714286, 27.14285714, 26.42857143,
    24.28571429, 22.85714286, 22.14285714, 20.71428571, 16.42857143, 13.57142857,
    10.71428571, 7.85714286, 2.85714286, 1.42857143, 0., 0.,
    0., 0., 0., 0., 0., 0.,
    0., 0.
])
'''
temp_Ar = np.array([11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0])
temp_Kr = np.array([11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0])
Ar_smoothed = np.array([
    -0.40650407, -0.40650407, 0., 0., 0., 0.,
    0., 0., 0., 0., 0., 0.,
    0., 0., 0., 2.03252033, 6.50406504, 27.64227642,
    58.94308943, 73.57723577, 53.65853659, 20.73170732, 2.03252033, 2.03252033,
    4.87804878, 6.09756098, 10.16260163, 12.19512195, 12.60162602, 11.38211382,
    8.94308943, 10.56910569, 8.53658537, 8.94308943, 9.3495935, 10.97560976,
    8.94308943, 5.28455285, 3.65853659, 6.91056911, 9.3495935, 16.66666667,
    21.54471545, 23.98373984, 17.88617886, 8.53658537, 3.25203252, 0.,
    0., 0., 0., 0., 0., 0.,
    0., 0.
])

Kr_smoothed = np.array([
    -0.456621, -0.456621, 0., 0., 0., 0.,
    0., 0., 0., 0., 0., 0.,
    0., 0., 0., 0., 0., 0.,
    0., 0., 0., 0., 0.91324201, 1.36986301,
    3.19634703, 9.5890411, 21.91780822, 53.42465753, 69.40639269, 67.12328767,
    38.81278539, 17.35159817, 7.76255708, 6.84931507, 7.76255708, 10.0456621,
    10.0456621, 10.95890411, 10.95890411, 9.13242009, 10.0456621, 7.30593607,
    5.47945205, 3.19634703, 3.65296804, 5.02283105, 3.65296804, 6.39269406,
    5.47945205, 5.02283105, 2.73972603, 3.19634703, 5.02283105, 11.41552511,
    18.26484018, 21.46118721, 21.91780822, 21.91780822, 18.26484018, 10.0456621,
    1.82648402, 0., 0., 0., 0., 0.,
    0., 0., 0., 0.
])

temp_Xe = np.array([11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0])
Xe_smoothed = np.array([
    -0.68027211, -0.68027211, 0., 0., 0., 0.,
    0., 0., 0., 0., 0., 0.,
    0., 0., 0., 0., 0., 0.,
    0., 0., 0., 0., 0., 0.,
    0., 0., 0., 0., 0., 0.68027211,
    0.68027211, 0.68027211, 0., 0., 0.68027211, 1.36054422,
    5.44217687, 8.16326531, 22.44897959, 36.73469388, 58.50340136, 76.8707483,
    82.99319728, 73.46938776, 47.61904762, 33.33333333, 24.48979592, 22.44897959,
    18.36734694, 16.32653061, 17.00680272, 14.28571429, 9.52380952, 5.44217687,
    2.04081633, 2.72108844, 2.04081633, 2.72108844, 3.40136054, 2.72108844,
    2.04081633, 2.04081633, 2.04081633, 4.08163265, 3.40136054, 9.52380952,
    14.96598639, 18.36734694, 20.40816327, 18.36734694, 25.85034014, 29.93197279,
    32.65306122, 24.48979592, 11.56462585, 3.40136054, 0., 0.,
    0., 0., 0., 0., 0., 0.,
    0.
])
'''
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from scipy.interpolate import make_interp_spline

def remove_duplicates(x, y):
    import pandas as pd
    df = pd.DataFrame({'x': x, 'y': y})
    df = df.groupby('x', as_index=False).mean()  # average y for duplicate x
    return df['x'].values, df['y'].values

ar_x, ar_y = remove_duplicates(temp_Ar, Ar_smoothed)
kr_x, kr_y = remove_duplicates(temp_Kr, Kr_smoothed)
xe_x, xe_y = remove_duplicates(temp_Xe, Xe_smoothed)

dfs = []
elements = ['Ar', 'Kr', 'Xe']
for x, y, el in zip([ar_x, kr_x, xe_x], [ar_y, kr_y, xe_y], elements):
    dfs.append(pd.DataFrame({'x': x, 'y': y, 'element': el}))

df = pd.concat(dfs, ignore_index=True)

offset_step = 90
offsets = {el: i * offset_step for i, el in enumerate(elements)}

plt.figure(figsize=(8,5))
colors = sns.color_palette("Set2", n_colors=len(elements))

for i, el in enumerate(elements):
    subset = df[df['element'] == el].sort_values('x')
    x_sorted = subset['x'].values
    y_sorted = subset['y'].values

    xnew = np.linspace(x_sorted.min(), x_sorted.max(), 300)
    spline = make_interp_spline(x_sorted, y_sorted)
    y_smooth = spline(xnew)

    y_offset = y_smooth + offsets[el]

    plt.fill_between(xnew, offsets[el], y_offset, color=colors[i], alpha=0.6)
    plt.plot(xnew, y_offset, color=colors[i], linewidth=2, label = elements[i])

plt.text(15,40,'Ar', fontsize=18)
plt.text(15,130,'Kr', fontsize=18)
plt.text(15,220,'Xe', fontsize=18)
plt.axvline(10)
plt.grid(False)
plt.xlabel('Temperature [K]', fontsize=18)
plt.ylabel('Norm. FLux [a.u.]', fontsize=18)
plt.tick_params(axis='x', which='major', length=6, width=1.5, direction='out')
plt.xticks(np.arange(0, 180 + 1, 20))  # Customize as needed
plt.yticks([])
plt.minorticks_on()
plt.tick_params(which='minor', length=4, color='gray')
plt.xlim(df['x'].min() , df['x'].max() + 5)
handles, labels = plt.gca().get_legend_handles_labels()
#plt.legend(handles,
#           labels,
#           loc='lower center',
#           bbox_to_anchor=(0.5, -0.45),  # Adjust Y further down if overlapping
#           frameon=True,
#           fontsize=24,
#           ncol=3)  # Optional: display in 2 columns
plt.tight_layout()
plt.gcf().subplots_adjust(left=0.05, bottom=0.15, right=0.99, top=0.99)
plt.show()
