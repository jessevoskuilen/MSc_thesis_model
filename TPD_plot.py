# -*- coding: utf-8 -*-
"""
Created on Wed Jan 29 14:48:26 2025

@author: vosku
"""
import matplotlib.pyplot as plt
import numpy as np
import os

CO2 = np.array([
    [51.364323126510875,  0.5514705882353041],
    [58.62459709911362,   0.5514705882353041],
    [65.88537469782435,   0.3676470588235361],
    [67.39121676067687,   0.7352941176470438],
    [69.71746575342465,   1.654411764705884],
    [71.63124496373891,   3.125],
    [73.26853344077357,   5.514705882352942],
    [75.03726833199033,   9.92647058823529],
    [76.11905721192586,  15.07352941176471],
    [76.78787268331989,  20.955882352941174],
    [77.45970991136181,  25.735294117647058],
    [77.99304995970991,  31.066176470588232],
    [78.52236099919419,  37.86764705882352],
    [79.18563658340048,  45.77205882352942],
    [79.44349315068493,  51.654411764705884],
    [80.1067687348912,   59.55882352941177],
    [80.77105157131345,  67.09558823529412],
    [81.02639000805802,  73.89705882352942],
    [81.28374294923448,  79.96323529411765],
    [81.67203867848508,  88.23529411764707],
    [81.93493150684931,  92.27941176470588],
    [82.12933118452861,  96.32352941176472],
    [82.59946615632553,  99.72426470588235],
    [83.01823126510878,  96.875],
    [83.02578565672844,  94.11764705882354],
    [83.03585817888799,  90.44117647058825],
    [83.31839242546332,  87.31617647058825],
    [83.46545124899275,  83.63970588235294],
    [83.61200644641417,  80.14705882352942],
    [83.82957292506043,  75.73529411764706],
    [83.77618855761482,  70.22058823529412],
    [83.92727639000806,  65.07352941176471],
    [84.00936744560836,  60.11029411764706],
    [83.95699033037873,  54.227941176470594],
    [84.10656728444802,  49.632352941176464],
    [84.25664786462531,  44.852941176470594],
    [84.40471394037066,  40.80882352941177],
    [84.28082191780823,  36.029411764705884],
    [84.50191377921033,  30.330882352941174],
    [84.7230056406124,   24.632352941176478],
    [84.73861804995968,  18.933823529411768],
    [84.89172038678485,  13.051470588235304],
    [85.17929089443996,   8.088235294117652],
    [85.32836422240128,   3.67647058823529],
    [85.47189766317484,   1.286764705882348],
    [86.98076148267525,   0.5514705882353041],
    [88.89856970185333,   0.5514705882353041],
    [90.8163779210314,    0.5514705882353041]
])

data_kr = np.array([
    [117.75729110946244, 0.5151586614672681],
    [123.47570615827263, 0.5533996523678155],
    [129.1867070329949, 1.2053694983231225],
    [135.23775549935542, 3.503104882240592],
    [140.55306006159654, 7.115786637784481],
    [144.63703630812427, 13.341258374743347],
    [146.6466071125173, 19.137427860861706],
    [148.1185149709036, 26.404147470654223],
    [149.31603698700957, 34.86592048798521],
    [150.25583626866603, 43.14341187575049],
    [151.18230506405783, 52.52437129319908],
    [151.87882297138478, 59.42215735257511],
    [152.55664116881275, 67.86786384247912],
    [153.4834802554897, 77.21817137021428],
    [154.61162355385434, 86.18561044116215],
    [156.9212045257728, 93.90295184497836],
    [160.192047468165, 81.36580405494001],
    [161.34013559770628, 72.40160747890368],
    [162.24994128526734, 61.64390506334687],
    [162.87814045048805, 52.67896790474029],
    [163.49134281866102, 44.955432279527415],
    [164.10287887605097, 37.36983015802497],
    [164.71608124422394, 29.646294532812107],
    [165.309287883, 23.5779609521242],
    [166.19576521959794, 14.75132758851315],
    [167.33385548444076, 6.614732034739305],
    [168.69611605375917, 2.3787808389690923],
    [170.32231419180536, 1.0990460784819902],
    [174.3516718005197, 0.8911106904602235]
])


data_brown = np.array([
     [130.10492754,  -0.18115942],
     [131.59826087,  -0.18115942],
     [133.73120773,   0.18115942],
     [136.18357488,   1.08695652],
     [138.42202899,   2.53623188],
     [141.19091787,   6.70289855],
     [143.10724638,  10.14492754],
     [145.23574879,  14.67391304],
     [146.93700483,  19.74637681],
     [147.99613527,  26.8115942 ],
     [148.84038647,  35.32608696],
     [149.68077295,  47.46376812],
     [149.68637681,  42.21014493],
     [150.31111111,  56.52173913],
     [151.14454106,  75.18115942],
     [151.15285024,  67.39130435],
     [152.20251208,  83.33333333],
     [152.83497585,  90.39855072],
     [153.25758454,  94.20289855],
     [153.57256039,  98.91304348],
     [154.00463768,  93.84057971],
     [154.22222222,  89.85507246],
     [154.22628019,  86.05072464],
     [154.44270531,  83.15217391],
     [154.5542029 ,  78.62318841],
     [154.98550725,  74.27536232],
     [154.99091787,  69.20289855],
     [155.10454106,  62.68115942],
     [155.32347826,  57.42753623],
     [155.43903382,  49.0942029 ],
     [155.65951691,  42.39130435],
     [155.99072464,  31.88405797],
     [155.99652174,  26.44927536],
     [156.43014493,  19.92753623],
     [157.50164251,  15.39855072],
     [159.10705314,  10.32608696],
     [160.60289855,   7.97101449],
     [163.37951691,   4.89130435],
     [166.68850242,   2.7173913 ],
     [169.7826087 ,   1.99275362]
])

data_fraser = np.array([
     [111.87800727,   8.26155061],
     [117.29367815,   8.58847326],
     [122.709967  ,   9.02817732],
     [128.12784495,   9.75789073],
     [132.71607045,  11.17139978],
     [134.91660754,  12.70293683],
     [138.84679059,  15.71046981],
     [142.1042982 ,  18.34002207],
     [143.05867817,  20.35709827],
     [144.28210658,  23.75199466],
     [145.07525556,  26.28480984],
     [145.46837383,  30.66300757],
     [145.79592863,  28.46330808],
     [145.90468058,  33.29940321],
     [146.5365957 ,  36.14995043],
     [146.79655024,  38.68106279],
     [147.01049967,  42.63742538],
     [147.1882242 ,  41.09297968],
     [147.51272109,  44.78954768],
     [148.0541848 ,  47.71793845],
     [148.5506833 ,  54.25738732],
     [149.05335514,  56.17381615],
     [149.06537265,  58.36701189],
     [149.568584  ,  60.38190068],
     [149.58200423,  62.83109233],
     [150.08479747,  64.76967464],
     [150.34335603,  67.04602185],
     [150.35403827,  68.99552918],
     [150.61490322,  71.69279274],
     [150.87358318,  73.99129343],
     [151.13541925,  76.86578493],
     [151.14743676,  79.05898067],
     [151.65290056,  81.48493982],
     [151.91218746,  83.89420798],
     [152.17341658,  86.65793202],
     [152.59414426,  91.87952164],
     [152.67594285,  89.02463797],
     [152.95419063,  94.41742031],
     [153.95971917, 103.67145065],
     [155.23470857, 106.41662151],
     [156.16864543,  96.82036208],
     [156.39581549, 100.77393016],
     [157.23630896,  82.48356665],
     [157.42502839,  86.98446843],
     [157.57441778,  84.30763868],
     [157.6043604 ,  89.77216679],
     [157.6782944 ,  73.32472621],
     [157.77284834,  75.61062268],
     [157.78353057,  77.56013001],
     [157.87886139,  79.98780883],
     [158.13264533,  66.42258818],
     [158.22684319,  68.64350108],
     [158.32183233,  71.00882193],
     [158.56381905,  55.29061002],
     [158.65801692,  57.51152292],
     [158.66869915,  59.46103024],
     [158.67938138,  61.41053757],
     [158.77422665,  63.74960242],
     [158.84277097,  46.31854678],
     [159.09890176,  48.15182414],
     [159.10958399,  50.10133147],
     [159.20442926,  52.44039632],
     [159.25598441,  32.69875433],
     [159.6365741 ,  41.4856461 ],
     [159.78450683,  38.54297444],
     [159.81655352,  44.39149642],
     [159.8881016 ,  29.56534907],
     [159.90025887,  26.47849109],
     [160.19881949,  23.61858422],
     [160.2603517 ,  35.56348146],
     [160.6488517 ,  21.07729366],
     [161.40128273,  18.51516815],
     [161.9073872 ,  16.14745968],
     [162.9572982 ,  14.22114183],
     [165.862767  ,  12.42655683],
     [170.96099061,  12.36405737],
     [176.37564624,  12.50569626]
])

kr_x = [115.90164684858476, 118.3606632420274, 120.98361156025871, 125.08197221599642, 128.68852459016392, 131.80328118996542, 134.75410586497821, 136.72131397685064, 138.52459016393442, 140.49179827580684, 142.29508697009476, 144.09837566438267, 145.90163934426226, 147.04917532498717, 148.19673632012038, 149.50819171842977, 150.655752713563, 151.3114804127177, 151.8032886942879, 152.62296082543543, 153.11476910700563, 153.77049680616034, 154.0983606557377, 154.42622450531505, 154.42622450531505, 155.40984106845542, 156.5573770491803, 157.70491302990519, 158.68852959304556, 159.18033787461576, 160.32787385534067, 160.32787385534067, 160.98360155449538, 161.63935426805838, 161.8032736856429, 162.2950819672131, 162.95083468077613, 163.442617947938, 163.77050681192364, 164.26229007908555, 164.75409836065572, 165.08196221023306, 165.7377149237961, 166.22952320536626, 167.21311475409837, 168.03278688524588, 168.52459516681606, 168.52459516681606, 168.6885395988089, 169.18032286597077, 169.18032286597077, 169.18032286597077, 169.3442672979636, 169.50821172995646, 169.67213114754094, 169.8360755795338, 169.99999499711828, 170.32788386110397, 170.6557477106813, 170.4918032786885, 170.81966712826585, 170.98361156025868, 170.81966712826585, 171.14755599225154, 171.31147540983608, 171.31147540983608, 171.14755599225154, 171.96722812339905, 172.1311475409836, 172.62295582255376, 173.11476410412394, 173.9344362352715, 176.55737204629864, 178.6885245901639, 183.11474909547897]
kr_y = [0.9803896819293532, 1.3071820871287672, 1.3071820871287672, 1.6339869586593154, 2.124175566458413, 2.614376640588669, 2.9411690457880595, 4.084967396648278, 4.248363599247984, 5.2287532811773145, 6.045746760506984, 7.026136442436337, 8.333330995896238, 10.13071415715526, 12.254902189944808, 14.869278830533476, 18.13725274785211, 20.58823318584106, 22.71242121863064, 25.326797859219287, 27.941174499807953, 30.065356299431922, 33.00653781155116, 35.784310654739514, 37.908498687529075, 39.86927805138778, 40.359479125518035, 39.54248564618839, 41.33985634111623, 44.44444652216632, 48.366011483049306, 51.30718676200294, 56.53594627634585, 61.601309588089045, 65.52287454897204, 69.28104330725533, 73.3660107039036, 77.45097810055188, 81.04575377281826, 84.31372769013689, 88.0718902152546, 91.99346452588595, 95.26143844320457, 97.87581196721044, 99.50980515903532, 97.87581196721044, 95.26143844320457, 93.13725664358059, 90.19607824804416, 87.5817016074555, 84.47712389273657, 81.69934793296542, 78.26797157988153, 74.83660145996322, 71.89542618100958, 68.46404982792568, 64.05229002607803, 59.80392019366445, 55.71895279701619, 51.63398540036791, 47.22221936535467, 43.30065440447167, 38.88887590312727, 34.1503236960802, 29.738563894232545, 25.326797859219287, 21.24183046257103, 16.666661991792477, 12.091505987345124, 7.843129921765983, 4.901960875977947, 2.7777728431883757, 2.614376640588669, 2.124175566458413, 1.9607793638587296]
plt.close('all')
# File naming pattern
path = r"C:\Users\vosku\source\repos\MC_sim_Renger\MC_sim_Renger\grid_data"
file_pattern = "grid0{:04d}.dat"  # Replace with your file naming convention
num_frames = 76 # Total number of frames (update based on your dataset)

last_Ar_atoms, last_Kr_atoms, last_Xe_atoms, last_H2O_atoms, last_CO2_atoms = 0, 0, 0, 0, 0
Ar_dat, Kr_dat, Xe_dat, H2O_dat, CO2_dat, temp_dat = [], [], [], [], [], []

def moving_average(data, window_size):
    """
    Computes a simple moving average.
    """
    return np.convolve(data, np.ones(window_size)/window_size, mode='valid')

def read_and_process_file(file_path):
    """
    Reads a .dat file and extracts data points and neighbor counts.
    """
    contents = np.loadtxt(file_path, dtype=float)
    data_points = []
    species_id = []
    time = []
    temperature = []
    
    for i in range(contents.shape[0]):
        data_points.append([contents[i, 0], contents[i, 1], contents[i, 2]])
        species_id.append(contents[i, 3])
        time.append(contents[i, 4])
        temperature.append(contents[i, 5])

    return np.array(data_points), species_id, time, temperature

# Process and plot each frame
for frame in range(1, num_frames + 1):
    file_path = os.path.join(path, file_pattern.format(frame))
    if not os.path.exists(file_path):
        print(f"File {file_path} does not exist. Skipping.")
        continue
    
    print(f"Processing {file_path}...")
    
    # Read and process the data
    data_points, species_id, time, temperature = read_and_process_file(file_path)
  
    # Calculate the percentage of red vs green atoms (species ID 39 and 10)
    Ar_atoms = np.sum(np.array(species_id) == 38)
    Kr_atoms = np.sum(np.array(species_id) == 39)
    Xe_atoms = np.sum(np.array(species_id) == 40)
    H2O_atoms = np.sum(np.array(species_id) == 10)
    CO2_atoms = np.sum(np.array(species_id) == 36)
    total_atoms = np.sum(np.array(species_id) > 0)
            
    time_stamp = max(time)
    temp = temperature[0]
    if frame == 1:
        min_temp = temp
    
    if temp > min_temp:
       Ar_dat.append(last_Ar_atoms - Ar_atoms)
       Kr_dat.append(last_Kr_atoms - Kr_atoms)
       Xe_dat.append(last_Xe_atoms - Xe_atoms)
       H2O_dat.append(last_H2O_atoms - H2O_atoms)
       CO2_dat.append(last_CO2_atoms - CO2_atoms)
       temp_dat.append(temp)
    
    last_Ar_atoms = Ar_atoms
    last_Kr_atoms = Kr_atoms
    last_Xe_atoms = Xe_atoms
    last_H2O_atoms = H2O_atoms
    last_CO2_atoms = CO2_atoms

Ar_dat.append(Ar_atoms)
Kr_dat.append(Kr_atoms)
Xe_dat.append(Xe_atoms)
H2O_dat.append(H2O_atoms)
CO2_dat.append(CO2_atoms)
temp_dat.append(temp+1)

for i in range(10):
    temp_dat.append(temp+i+1)
    H2O_dat.append(0)
    CO2_dat.append(0)
    Ar_dat.append(0)
    Xe_dat.append(0)
    Kr_dat.append(0)

# Create side-by-side plots
fig, axes = plt.subplots(1, 1, figsize=(8,5))


#--------------------------------------------------------------------------------------
import matplotlib.pyplot as plt
import numpy as np
import matplotlib.pyplot as plt
from scipy.signal import savgol_filter

# --- Smooth function with edge preservation ---
def padded_savgol(data, window_length=5, polyorder=0):
    pad = window_length // 2
    padded = np.pad(data, pad_width=pad, mode='reflect')
    smoothed = savgol_filter(padded, window_length, polyorder)
    return smoothed[pad:-pad]

# --- Apply smoothing to your normalized data ---
H2O_smoothed = padded_savgol(100 * (H2O_dat / max(H2O_dat)))
CO2_smoothed = padded_savgol(100 * (CO2_dat / max(CO2_dat)))
Ar_smoothed = padded_savgol(100 * (Ar_dat / max(Ar_dat)))
Kr_smoothed = padded_savgol(100 * (Kr_dat / max(Kr_dat)))
Xe_smoothed = padded_savgol(100 * (Xe_dat / max(Xe_dat)))

# Set global style
#plt.style.use('seaborn-v0_8-whitegrid')  # or try 'ggplot', 'bmh', or 'fivethirtyeight'

# Configure figure aesthetics
plt.rcParams.update({
    'figure.figsize': (8,5),
    'axes.titlesize': 18,
    'axes.labelsize': 18,
    'xtick.labelsize': 18,
    'ytick.labelsize': 18,
    'legend.fontsize': 18,
    'axes.spines.top': False,
    'axes.spines.right': False,
    'axes.spines.left': True,
    'lines.linewidth': 1.5,
    'grid.alpha': 0.0,
    'scatter.marker': '^',
    'lines.markersize': 5,
    'font.family': 'DejaVu Sans',  # or 'serif', 'Arial', etc.
})


import matplotlib.cm as cm
blues = cm.get_cmap('Blues')

#plt.plot(temp_dat, 100*(H2O_smoothed/max(H2O_smoothed)), label='H2O', color='#1f77b4')
plt.plot(temp_dat, 100*(CO2_smoothed/max(CO2_smoothed)), label='Model', color=blues(0.7777773))
#plt.plot(temp_dat, 100*(Ar_smoothed/max(Ar_smoothed)), label='Ar', color='#ff7f0e')
#plt.plot(temp_dat, 100*(Kr_smoothed/max(Kr_smoothed)), label='Kr', color='#2ca02c')
#plt.plot(temp_dat, 100*(Xe_smoothed/max(Xe_smoothed)), label='Xe', color='#2ca02c')
#plt.plot(temp_dat, 100*(H2O_dat/max(H2O_dat)), label='H2O', color='#1f77b4')  # Blue
#plt.plot(temp_dat, 100*(CO2_dat/max(CO2_dat)), label='H2O', color='#1f77b4')  # Blue
#plt.plot(temp_dat, 100*(Ar_dat/max(Ar_dat)), label='Ar', color='#ff7f0e')       # Orange
#plt.plot(temp_dat, 100*(Kr_dat/max(Kr_dat)), label='Kr', color='#2ca02c')       # Green
#plt.plot(temp_dat, 100*(Xe_dat/max(Xe_dat)), label='Xe', color='#1f77b4')       ##1f77b4 Blue

#plt.scatter(data_fraser[:,0],data_fraser[:,1]-8, label='Fraser 2001', color='black')  # Orange
#plt.scatter(data_brown[:,0],data_brown[:,1], label='Brown 2006', color='black')  # Orange
#plt.scatter(kr_x,kr_y, label='Kruczkiewicz 2024', color='black')  # Orange
plt.scatter(CO2[:,0],100*(CO2[:,1]/max(CO2[:,1])), label='Kruczkiewicz 2024', color='black')  # Orange

plt.fill_between(temp_dat, 0, 100*(CO2_smoothed/max(CO2_smoothed)), color=blues(0.777773), alpha=0.3)

print(temp_dat)
print(Ar_smoothed)
print(Kr_smoothed)
print(Xe_smoothed)

# Labels and title
plt.xlabel('Temperature [K]')
plt.ylabel('Norm. FLux [a.u.]')
plt.ylim(0,110)
plt.xlim(0,110)
plt.grid(False)
# Example: Custom ticks
plt.tick_params(axis='x', which='major', length=6, width=1.5, direction='out')
plt.tick_params(axis='y', which='major', length=6, width=1.5, direction='out')
plt.xticks(np.arange(0, 100 + 1, 20))  # Customize as needed
plt.yticks(np.arange(0, 100 + 1, 20))    # Y-ticks from 0 to 110, every 10
plt.minorticks_on()
plt.tick_params(which='minor', length=4, color='gray')
handles, labels = plt.gca().get_legend_handles_labels()
plt.legend(handles,
           labels,
           loc='lower center',
           bbox_to_anchor=(0.5, -0.38),  # Adjust Y further down if overlapping
           frameon=True,
           fontsize=18,
           ncol=2)  # Optional: display in 2 columns
plt.tight_layout()
plt.gcf().subplots_adjust(left=0.12, bottom=0.25, right=0.99, top=0.95)
plt.show()



